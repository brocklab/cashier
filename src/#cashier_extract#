#!/usr/bin/env bash
version="0.1"

# get arguments 
while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
  -V | --version )
    echo $version
    exit
    ;;
  -v | --verbose ) 
		echo "verbose mode - all commands will be printed"
		set -x 
		;; 
  -i | --input )
    shift; input_file=$1
    ;;
  -u | --upstream_sequence )
    shift; upstream_sequence=$1
    ;;
  -d | --downstream_sequence )
    shift; downstream_sequence=$1
    ;;
  -bl | --barcode_length )
    shift; barcode_length=$1
    ;;
  -e | --error_rate )
    shift; error_rate=$1
    ;;
  -ul | --umi_length )
    shift; umi_length=$1
    ;;
  -umi | --umi )
    extract_umi="1"
    ;;
  -t | --trim )
    shift; trim=$1
    ;;
  -q | --min_quality )
    shift; min_quality=$1
    ;;  
  -ul | --unlinked_adapters )
    unlinked_adapters=1
    ;;  
  -j | --threads )
    shift; threads=$1
    ;;
esac; shift; done
if [[ "$1" == '--' ]]; then shift; fi


# require input fastq file 
if [ -z "$input_file" ]; then echo "Must supply an input file:   cashier_extract -i <input.fastq>"; exit; fi 



# set defaults 
if [ -z "$upstream_sequence" ]; then upstream_sequence="ATCTTGTGGAAAGGACGAAACACCG"; fi 
if [ -z "$downstream_sequence" ]; then downstream_sequence="GTTTTAGAGCTAGAAATAGCAAGTT"; fi 

if [ -z "$barcode_length" ]; then barcode_length=20; fi 
if [ -z "$umi_length" ]; then umi_length=16; fi 
if [ -z "$error_rate" ]; then error_rate=0.1; fi 



sample_name=$(echo $input_file | rev | cut -d'/' -f 1 | rev | cut -d'.' -f 1 | cut -d'_' -f 1 ) 


echo "input file: " $input_file
echo "sample name: " $sample_name
echo "required barcode length: " $barcode_length
echo "upstream sequence: " $upstream_sequence
echo "downstream_sequence: " $downstream_sequence
echo "allowed error rate: " $error_rate


### barcode extraction 

echo "running barcode extraction, allowing adapter error of " $error_rate
barcode_fastq_file=$sample_name.barcode.fastq
echo "barcode fastq file: " $barcode_fastq_file

if [ -n "$unlinked_adapters" ]; then 
	adapter_string=" -g $upstream_sequence -a $downstream_sequence "
else 
	adapter_string=" -g $upstream_sequence...$downstream_sequence "
fi 

if [ -n "$threads" ]; then 
  threads_string=" -j $threads "
else
  threads_string=" "
fi 

cutadapt $threads_string -e $error_rate --minimum-length=$barcode_length --maximum-length=$barcode_length --max-n=0 --trimmed-only $adapter_string -n 2 -o $barcode_fastq_file $input_file


if [ -n "$min_quality" ]; then 
	echo "filtering barcodes for all bases minimum quality " $min_quality
	filtered_barcode_fastq_file=${barcode_fastq_file%.fastq}.q${min_quality}.fastq 
	fastq_quality_filter -q $min_quality -p 100 -i $barcode_fastq_file -o $filtered_barcode_fastq_file -Q 33
  rm $barcode_fastq_file
	barcode_fastq_file=$filtered_barcode_fastq_file
fi 

echo "transforming fastq to tsv" 
if [ -n "$min_quality" ]; then 
  barcode_tsv_file=$sample_name.barcodes.q${min_quality}.tsv 
else 
  barcode_tsv_file=$sample_name.barcodes.tsv 
fi

awk 'BEGIN{RS="@";FS="\n";OFS="\t"}NR>1{gsub(/ .+/, "", $1); print $1,$2}' $barcode_fastq_file > $barcode_tsv_file


### umi extraction 

if [ -n "$extract_umi" ]; then 
	echo "running UMI extraction"
	echo "required UMI length: " $umi_length
	umi_fastq_file=$sample_name.umi.fastq 
	echo "umi fastq file: " $umi_fastq_file
	if  [ -n "$trim" ]; then 
		trim=$trim 
	else
		trim=0
	fi 
	cutadapt -e $error_rate --minimum-length=$umi_length --maximum-length=$umi_length --max-n=0 -a $upstream_sequence -u $trim -o $umi_fastq_file $input_file

	if [ -n "$min_quality" ]; then 
		echo "filtering UMIs for all bases minimum quality " $min_quality
		filtered_umi_fastq_file=${umi_fastq_file%.fastq}.filtered.fastq 
		fastq_quality_filter -q $min_quality -p 100 -i $umi_fastq_file -o $filtered_umi_fastq_file -Q 33
		umi_fastq_file=$filtered_umi_fastq_file
	fi 

	echo "transforming umi fastq to tsv" 
	umi_tsv_file=$sample_name.umis.tsv 
  awk 'BEGIN{RS="@";FS="\n";OFS="\t"}NR>1{gsub(/ .+/, "", $1); print $1,$2}'  $umi_fastq_file > $umi_tsv_file


	# joining barcode and umi on read name 

	echo "joining barcode and umi on read name "

	join <(sort -k1 $umi_tsv_file ) <(sort -k1 $barcode_tsv_file) | tr ' ' '\t' > $sample_name.umis.barcodes.tsv 
fi 
