#!/usr/bin/env bash
version="0.1"

# get arguments 
while [[ "$1" =~ ^- && ! "$1" == "--" ]]; do case $1 in
  -V | --version )
    echo $version
    exit
    ;;
  -v | --verbose ) 
    echo "verbose mode - all commands will be printed"
    set -x 
    ;; 
  -i | --input )
    shift; input_file=$1
    ;;
  -d | --distance )
    shift; distance=$1
    ;;
  -r | --ratio )
    shift; ratio=$1
    ;;  
  -s | --spherical )
    spherical=1
    ;;
  -uo | --umi-only )
    skip_barcodes=1
    ;;
  -t | --threads )
    shift; threads=$1
    ;;
  -c | --columns )
		shift; IFS=',' read -r -a columns <<< $1
		;; 
esac; shift; done
if [[ "$1" == '--' ]]; then shift; fi


if [ -z "$input_file" ]; then echo "must supply input file with -i <infile> "; exit; fi 
if [ -z "$columns" ]; then echo "must supply columns to cluster with -c <2,3,etc> "; exit; fi  
if [ -z "$distance" ]; then distance=1; fi 
if [ -z "$ratio" ]; then ratio=5; fi 
if [ -z "$threads" ]; then threads=1; fi 


sample_name=$(echo $input_file | rev | cut -d'/' -f 1 | rev | cut -d'.' -f 1 | cut -d'_' -f 1 ) 

echo "input file: " $input_file
echo "sample name: " $sample_name


for column in ${columns[@]}
do 
	echo 'working with file ' $input_file 
  echo 'using ' $threads ' threads ' 

  if [ -n "$spherical" ]; then 
    method_string=" -s "
    echo "clustering column " $column " with levenshtien distance: " $distance " using spherical method" 
    ratio='s'
  else 
    method_string=" -r $ratio "
    echo "clustering column " $column " with levenshtien distance: " $distance " using message-passing at ratio of " $ratio  
  fi 

	# cluster to generate starcode output, pass through awk column aggregator and sort 
  input_file_without_absolute_path=$(echo $input_file | rev | cut -d'/' -f 1 | rev ) 
	tmp_sorted_starcode_file=tmp_${input_file_without_absolute_path%.tsv}.c${column}d${distance}r${ratio}.sorted.stc
	echo "printing starcode clustering output to: " $tmp_sorted_starcode_file

	cat $input_file | cut -f $column | starcode -d $distance -t $threads $method_string --print-clusters | awk '{split($0,arr,"\t"); split(arr[3],sequences,",");  for (i in sequences) print arr[1], arr[2], sequences[i] }' | sort -k3 | uniq > $tmp_sorted_starcode_file
	
l	echo "joining clustered data with original file"
  output_file=$(echo $input_file | rev | cut -d'/' -f 1 | rev )  
	output_file_with_clustered_data=${output_file%.tsv}.c${column}d${distance}r${ratio}.tsv
  echo 'printing joined output to ' $output_file_with_clustered_data

	join -1 $column -2 3 -o '1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,1.10,1.11,1.12,1.13,2.1,2.2' <(sort -k $column $input_file) $tmp_sorted_starcode_file | tr -s " "  > $output_file_with_clustered_data

	input_file=$output_file_with_clustered_data
done 

echo "done. clustered data in: " $input_file 
